#!/usr/bin/env python3

"""
Purdue CS Bridge Gradescope Autograder
>> run_autograder

Description:
  This script runs when a student
  uploads their code to Gradescope.

Last updated:
  04/17/2022
"""
from pathlib import Path
import json
import sys
from typing import Dict, List, Union, Literal
from subprocess import run


autograder = Path("/autograder/source/autograder.jar")
submission = Path("/autograder/submission/")
submission_output = Path("/autograder/compiled_submission/")
results_file = Path("/autograder/results/results.json")


def _compile(source_files: List[Path], args: List[str]):
    """Generic compile"""
    if not source_files:
        return None
    src = [str(x) for x in source_files]
    result = run([*args, *src], capture_output=True, check=False)
    if result.returncode != 0:
        results = {
            "output": "Unable to compile submission",
            "tests": [
                {
                    "output": result.stderr.decode(),
                    "score": 0,
                    "number": "",
                    "visibility": "visible",
                    "max_score": 0,
                    "name": "Compiler Output",
                }
            ],
        }
        results_file.write_text(json.dumps(results), encoding="utf-8")
        sys.exit(1)
    return result


def compile_java(source_files: List[Path]):
    """Compile the java source files and capture output"""
    args = ["javac", "-encoding", "UTF-8", "-d", str(submission_output)]
    return _compile(source_files, args)


def compile_kt(source_files: List[Path]):
    """Compile the kt source files and capture output"""
    args = ["kotlinc", "-d", str(submission_output)]
    return _compile(source_files, args)


def run_autograder():
    """Runs the autograder with the student submission
    Note: autograder comes before submission_output to guard
      against class injection. The autograder JAR should not
      contain compiled starter code (otherwise the starter code
      will take precedence over the submission).
    """

    result = run(
        ["java", "-cp", f"{autograder}:{submission_output}", "TestRunner"],
        check=False,
        capture_output=True,
    )
    return result


def find_source_files() -> Dict[Union[Literal["java"], Literal["kotlin"]], Path]:
    """Find the java and kotlin submission files in the submission directory"""

    java_files = [f for f in submission.rglob("*.java") if f.is_file()]
    kt_files = [f for f in submission.rglob("*.kt") if f.is_file()]
    return {"java": java_files, "kotlin": kt_files}


def main():
    """Grader entry point"""
    files = find_source_files()

    java_files = files["java"]
    kt_files = files["kotlin"]

    if not java_files and not kt_files:
        results = {
            "output": "No java or kotlin file found in your submission.",
            "tests": [
                {
                    "output": "No Java or Kotlin files were submitted.",
                    "score": 0,
                    "number": "",
                    "visibility": "visible",
                    "max_score": 0,
                    "name": "Compiler Output",
                }
            ],
        }
        results_file.write_text(json.dumps(results), encoding="utf-8")
        sys.exit(1)

    compile_java(java_files)
    compile_kt(kt_files)

    result = run_autograder()
    results_file.write_bytes(result.stdout)


if __name__ == "__main__":
    main()
