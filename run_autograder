#!/usr/bin/env python3

"""
Purdue CS Bridge Gradescope Autograder
>> run_autograder

Description:
  This script runs when a student
  uploads their code to Gradescope.

Last updated:
  04/17/2022
"""
from pathlib import Path
import json
import sys
from typing import Dict, List, Tuple, Union, Literal
from subprocess import run


autograder = Path("/autograder/source/autograder.jar")
submission = Path("/autograder/submission/")
submission_output = Path("/autograder/compiled_submission/")
results_file = Path("/autograder/results/results.json")


def _compile(source_files: List[Path], args: List[str]) -> Tuple[int, bytes]:
    """Generic compile"""
    if not source_files:
        return (0, b"")
    src = [str(x) for x in source_files]
    result = run([*args, *src], capture_output=True, check=False)
    if result.returncode != 0:
        return (result.returncode, result.stderr)
    return (result.returncode, result.stdout)


def _compile_java(source_files: List[Path]):
    """Compile the java source files and capture output"""
    args = ["javac", "-encoding", "UTF-8", "-d", str(submission_output)]
    return _compile(source_files, args)


def _compile_kt(source_files: List[Path]):
    """Compile the kt source files and capture output"""
    args = ["kotlinc", "-d", str(submission_output)]
    return _compile(source_files, args)


def compile_files(
    source: Dict[Union[Literal["java"], Literal["kotlin"]], Path]
) -> None:
    """
    Compile the java and kotline files, handle any exception,
    returns None on success, exits with (1) on failure
    """
    err_result = None
    if not source["java"] and not source["kotlin"]:
        err_result = {
            "output": "Unable to compile submission",
            "tests": [
                {
                    "output": "No Java or Kotlin files were submitted.",
                    "score": 0,
                    "number": "",
                    "visibility": "visible",
                    "max_score": 0,
                    "name": "Compiler Output",
                }
            ],
        }
    else:
        (java_ret, java_result) = _compile_java(source["java"])
        (kt_ret, kt_result) = _compile_kt(source["kotlin"])
        errors = ""
        if java_ret != 0:
            errors += f"{java_result.decode()}\n"
        if kt_ret != 0:
            errors += f"{kt_result.decode()}\n"
        if errors:
            err_result = {
                "output": "Unable to compile submission",
                "tests": [
                    {
                        "output": errors,
                        "score": 0,
                        "number": "",
                        "visibility": "visible",
                        "max_score": 0,
                        "name": "Compiler Output",
                    }
                ],
            }
    if err_result is not None:
        results_file.write_text(json.dumps(err_result), encoding="utf-8")
        sys.exit(1)


def run_autograder():
    """Runs the autograder with the student submission
    Note: autograder comes before submission_output to guard
      against class injection. The autograder JAR should not
      contain compiled starter code (otherwise the starter code
      will take precedence over the submission).
    """

    result = run(
        ["java", "-cp", f"{autograder}:{submission_output}", "TestRunner"],
        check=False,
        capture_output=True,
    )
    return result


def find_source_files() -> Dict[Union[Literal["java"], Literal["kotlin"]], Path]:
    """Find the java and kotlin submission files in the submission directory"""

    java_files = [f for f in submission.rglob("*.java") if f.is_file()]
    kt_files = [f for f in submission.rglob("*.kt") if f.is_file()]
    return {"java": java_files, "kotlin": kt_files}


def main():
    """Grader entry point"""
    files = find_source_files()
    compile_files(files)
    result = run_autograder()
    results_file.write_bytes(result.stdout)


if __name__ == "__main__":
    main()
